#!/usr/bin/env bash
set -eo pipefail
APP="$1"; PORT="$2"

IMAGE="dokku/$APP"

if [[ -f "$DOKKU_ROOT/$APP/DEPLOY_SIDEKIQ" ]]; then

  echo "-----> Starting another copy for a worker for app $APP from image $IMAGE..."

  # kill the previous worker when running
  if [[ -f "$DOKKU_ROOT/$APP/WORKER_1" ]]; then
        oldid=$(< "$DOKKU_ROOT/$APP/WORKER_1")
        if docker inspect $oldid > /dev/null
        then
          echo "-----> Killing old worker 1 app $oldid"
          docker kill $oldid > /dev/null
        fi
        rm $DOKKU_ROOT/$APP/WORKER_1
  fi
  # kill the previous worker when running
  if [[ -f "$DOKKU_ROOT/$APP/WORKER_2" ]]; then
        oldid=$(< "$DOKKU_ROOT/$APP/WORKER_2")
        if docker inspect $oldid > /dev/null
        then
          echo "-----> Killing old worker 2 app $oldid"
          docker kill $oldid > /dev/null
        fi
        rm $DOKKU_ROOT/$APP/WORKER_2
  fi

  # start a copy of the app and run sidekiq
  DOCKER_ARGS=$(: | pluginhook docker-args $APP)
  
  id1=$(docker run $DOCKER_ARGS -d $IMAGE  /exec bundle exec sidekiq)
  echo $id1 > "$DOKKU_ROOT/$APP/WORKER_1"
  
  id2=$(docker run $DOCKER_ARGS -d $IMAGE  /exec bundle exec sidekiq -C /app/config/sidekiq_notifications.yml)
  echo $id2 > "$DOKKU_ROOT/$APP/WORKER_2"
  
  echo "-----> Sidekiq worker 1 started with ID $id1"
  echo "-----> Sidekiq worker 2 started with ID $id2"
fi
